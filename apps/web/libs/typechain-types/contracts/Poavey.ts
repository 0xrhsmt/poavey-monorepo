/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface PoaveyInterface extends utils.Interface {
  functions: {
    "answerSurvey(uint256,uint256,uint256,uint256,uint256[8])": FunctionFragment;
    "attendEvent(uint256,uint256)": FunctionFragment;
    "events(uint256)": FunctionFragment;
    "getAnswers(uint256)": FunctionFragment;
    "getCommitments(uint256)": FunctionFragment;
    "getSurveyOptions(uint256)": FunctionFragment;
    "isAttendee(uint256,address)": FunctionFragment;
    "isNullifierExists(uint256,uint256)": FunctionFragment;
    "registerEvent(uint256,uint256,string[])": FunctionFragment;
    "semaphore()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "answerSurvey"
      | "attendEvent"
      | "events"
      | "getAnswers"
      | "getCommitments"
      | "getSurveyOptions"
      | "isAttendee"
      | "isNullifierExists"
      | "registerEvent"
      | "semaphore"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "answerSurvey",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "attendEvent",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnswers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitments",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSurveyOptions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAttendee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isNullifierExists",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEvent",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "semaphore", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "answerSurvey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attendEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAnswers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSurveyOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAttendee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNullifierExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "semaphore", data: BytesLike): Result;

  events: {
    "EventAttended(uint256,address,uint256)": EventFragment;
    "EventRegistered(uint256,uint256,uint256)": EventFragment;
    "SurveyAnswered(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventAttended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SurveyAnswered"): EventFragment;
}

export interface EventAttendedEventObject {
  id: BigNumber;
  attendee: string;
  groupId: BigNumber;
}
export type EventAttendedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  EventAttendedEventObject
>;

export type EventAttendedEventFilter = TypedEventFilter<EventAttendedEvent>;

export interface EventRegisteredEventObject {
  id: BigNumber;
  eventId: BigNumber;
  groupId: BigNumber;
}
export type EventRegisteredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  EventRegisteredEventObject
>;

export type EventRegisteredEventFilter = TypedEventFilter<EventRegisteredEvent>;

export interface SurveyAnsweredEventObject {
  id: BigNumber;
  answers: BigNumber;
  groupId: BigNumber;
}
export type SurveyAnsweredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SurveyAnsweredEventObject
>;

export type SurveyAnsweredEventFilter = TypedEventFilter<SurveyAnsweredEvent>;

export interface Poavey extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoaveyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    answerSurvey(
      id: PromiseOrValue<BigNumberish>,
      answers: PromiseOrValue<BigNumberish>,
      merkleTreeRoot: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    attendEvent(
      id: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    events(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        groupId: BigNumber;
        eventId: BigNumber;
      }
    >;

    getAnswers(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getCommitments(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getSurveyOptions(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    isAttendee(
      id: PromiseOrValue<BigNumberish>,
      attendee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isNullifierExists(
      id: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerEvent(
      eventId: PromiseOrValue<BigNumberish>,
      groupId: PromiseOrValue<BigNumberish>,
      surveyOptions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    semaphore(overrides?: CallOverrides): Promise<[string]>;
  };

  answerSurvey(
    id: PromiseOrValue<BigNumberish>,
    answers: PromiseOrValue<BigNumberish>,
    merkleTreeRoot: PromiseOrValue<BigNumberish>,
    nullifierHash: PromiseOrValue<BigNumberish>,
    proof: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  attendEvent(
    id: PromiseOrValue<BigNumberish>,
    identityCommitment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  events(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      groupId: BigNumber;
      eventId: BigNumber;
    }
  >;

  getAnswers(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getCommitments(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getSurveyOptions(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isAttendee(
    id: PromiseOrValue<BigNumberish>,
    attendee: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isNullifierExists(
    id: PromiseOrValue<BigNumberish>,
    nullifierHash: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerEvent(
    eventId: PromiseOrValue<BigNumberish>,
    groupId: PromiseOrValue<BigNumberish>,
    surveyOptions: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  semaphore(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    answerSurvey(
      id: PromiseOrValue<BigNumberish>,
      answers: PromiseOrValue<BigNumberish>,
      merkleTreeRoot: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    attendEvent(
      id: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    events(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        groupId: BigNumber;
        eventId: BigNumber;
      }
    >;

    getAnswers(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getCommitments(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getSurveyOptions(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isAttendee(
      id: PromiseOrValue<BigNumberish>,
      attendee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNullifierExists(
      id: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerEvent(
      eventId: PromiseOrValue<BigNumberish>,
      groupId: PromiseOrValue<BigNumberish>,
      surveyOptions: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    semaphore(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "EventAttended(uint256,address,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      attendee?: PromiseOrValue<string> | null,
      groupId?: PromiseOrValue<BigNumberish> | null
    ): EventAttendedEventFilter;
    EventAttended(
      id?: PromiseOrValue<BigNumberish> | null,
      attendee?: PromiseOrValue<string> | null,
      groupId?: PromiseOrValue<BigNumberish> | null
    ): EventAttendedEventFilter;

    "EventRegistered(uint256,uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      eventId?: PromiseOrValue<BigNumberish> | null,
      groupId?: PromiseOrValue<BigNumberish> | null
    ): EventRegisteredEventFilter;
    EventRegistered(
      id?: PromiseOrValue<BigNumberish> | null,
      eventId?: PromiseOrValue<BigNumberish> | null,
      groupId?: PromiseOrValue<BigNumberish> | null
    ): EventRegisteredEventFilter;

    "SurveyAnswered(uint256,uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      answers?: PromiseOrValue<BigNumberish> | null,
      groupId?: PromiseOrValue<BigNumberish> | null
    ): SurveyAnsweredEventFilter;
    SurveyAnswered(
      id?: PromiseOrValue<BigNumberish> | null,
      answers?: PromiseOrValue<BigNumberish> | null,
      groupId?: PromiseOrValue<BigNumberish> | null
    ): SurveyAnsweredEventFilter;
  };

  estimateGas: {
    answerSurvey(
      id: PromiseOrValue<BigNumberish>,
      answers: PromiseOrValue<BigNumberish>,
      merkleTreeRoot: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    attendEvent(
      id: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    events(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAnswers(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCommitments(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSurveyOptions(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAttendee(
      id: PromiseOrValue<BigNumberish>,
      attendee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNullifierExists(
      id: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerEvent(
      eventId: PromiseOrValue<BigNumberish>,
      groupId: PromiseOrValue<BigNumberish>,
      surveyOptions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    semaphore(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    answerSurvey(
      id: PromiseOrValue<BigNumberish>,
      answers: PromiseOrValue<BigNumberish>,
      merkleTreeRoot: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    attendEvent(
      id: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    events(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAnswers(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCommitments(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSurveyOptions(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAttendee(
      id: PromiseOrValue<BigNumberish>,
      attendee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNullifierExists(
      id: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerEvent(
      eventId: PromiseOrValue<BigNumberish>,
      groupId: PromiseOrValue<BigNumberish>,
      surveyOptions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    semaphore(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
